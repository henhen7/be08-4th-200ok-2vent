name: frontend-pipeline

on:
  push:
    branches:
      - main

jobs:
  build-frontend:
    runs-on: ubuntu-latest
    environment: backend_git_actions
    steps:
      - name: Checkout code from GitHub
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '22.8.0'

      - name: Install and Build Frontend
        run: |
          cd frontend
          npm install
          npm run build
      
      # - name: Upload build artifacts
      #   uses: actions/upload-artifact@v3
      #   with:
      #     name: backend-jar
      #     path: ./backend/build/libs/*.jar

  docker-build-push:
    runs-on: ubuntu-latest
    environment: backend_git_actions
    needs: build-frontend
    steps:
      - name: Checkout code from GitHub
        uses: actions/checkout@v3

      # - name: Download build artifacts
      #   uses: actions/download-artifact@v3
      #   with:
      #     name: backend-jar
      #     path: ./backend/build/libs

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        run: |
          cd frontend
          DOCKER_IMAGE_TAG="1.${{ github.run_number }}-fe"
          docker build --no-cache -t ${{ secrets.DOCKER_HUB_REPO }}:$DOCKER_IMAGE_TAG .
          docker push ${{ secrets.DOCKER_HUB_REPO }}:$DOCKER_IMAGE_TAG

  deploy-frontend:
    runs-on: ubuntu-latest
    environment: backend_git_actions
    needs: docker-build-push
    steps:
      - name: Set up kubectl
        run: |
          echo "${{ secrets.KUBE_CONFIG_DATA }}" | base64 -d > ~/.kube/config

      - name: Deploy to Kubernetes
        env:
          DOCKER_IMAGE_TAG: "1.${{ github.run_number }}-fe"
        run: |
          kubectl set image deployment backend-deployment backend-container=${{ secrets.DOCKER_HUB_REPO }}:$DOCKER_IMAGE_TAG -n default

  notify-discord:
    runs-on: ubuntu-latest
    needs: [build-frontend, docker-build-push, deploy-frontend]
    if: always()
    steps:
      - name: Send notification to Discord
        if: success()
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        run: |
          curl -H "Content-Type: application/json" \
            -d '{"content":"**CI/CD Pipeline Success**\n'\
                  'Build Number: '${{ github.run_number }}\'}' \
