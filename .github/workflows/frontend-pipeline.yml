name: frontend-pipeline

on:
  push:
    branches:
      - main
    paths:
      - 'frontend/**'

jobs:
  build-frontend:
    runs-on: ubuntu-latest
    environment: backend_git_actions
    steps:
      - name: Checkout code from GitHub
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '22.8.0'

      - name: Install and Build Frontend
        run: |
          cd frontend
          npm install
          npm run build

  docker-build-push:
    runs-on: ubuntu-latest
    environment: backend_git_actions
    needs: build-frontend
    steps:
      - name: Checkout code from GitHub
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        run: |
          cd frontend
          DOCKER_IMAGE_TAG="1.${{ github.run_number }}-fe"
          docker build --no-cache -t ${{ secrets.DOCKER_HUB_REPO }}:$DOCKER_IMAGE_TAG .
          docker push ${{ secrets.DOCKER_HUB_REPO }}:$DOCKER_IMAGE_TAG

  # deploy-frontend:
  #   runs-on: ubuntu-latest
  #   environment: backend_git_actions
  #   needs: docker-build-push
  #   steps:
  #     - name: Set up kubectl
  #       run: |
  #         echo "${{ secrets.KUBE_CONFIG_DATA }}" | base64 -d > ~/.kube/config

  #     - name: Deploy to Kubernetes
  #       env:
  #         DOCKER_IMAGE_TAG: "1.${{ github.run_number }}-fe"
  #       run: |
  #         kubectl set image deployment backend-deployment backend-container=${{ secrets.DOCKER_HUB_REPO }}:$DOCKER_IMAGE_TAG -n default


  update-deployment-file:
    runs-on: ubuntu-latest
    needs: docker-build-push
    steps:
      - name: Checkout code from GitHub
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Update deployment.yaml
        env:
          DOCKER_IMAGE_TAG: "1.${{ github.run_number }}-fe"
        run: |
          sed -i "s|henhen7/be08-4th-2team:.*|${{ secrets.DOCKER_HUB_REPO }}:${{ env.DOCKER_IMAGE_TAG }}|g" k8s/frontend/frontend-deployment.yaml
          cat k8s/frontend/frontend-deployment.yaml  # 변경 내용 확인

      - name: Commit & Push changes
        env:
          GIT_USER: "eatho"
          GIT_EMAIL: "eatho@naver.com"
        run: |
          git config user.name "$GIT_USER"
          git config user.email "$GIT_EMAIL"
          git add k8s/frontend/frontend-deployment.yaml
          git commit -m "Update Image Version to $DOCKER_IMAGE_TAG"
          git push

      - name: Check if deployment.yaml changed
        id: check_frontend_deployment_change
        run: |
          # 변경 사항이 있는지 확인
          if git diff --name-only HEAD~1 | grep -q "k8s/frontend/frontend-deployment.yaml"; then
            echo "frontend_deployment_changed=true" >> $GITHUB_ENV
          else
            echo "frontend_deployment_changed=false" >> $GITHUB_ENV
          fi

      - name: Trigger Argo CD Sync
        if: env.frontend_deployment_changed == 'true'
        env:
          ARGOCD_SERVER: ${{ secrets.ARGOCD_SERVER }}
          ARGOCD_TOKEN: ${{ secrets.ARGOCD_TOKEN }}
          APP_NAME: "frontend-application"
        run: |
          curl -X POST "$ARGOCD_SERVER/api/v1/applications/$APP_NAME/sync" \
            -H "Authorization: Bearer $ARGOCD_TOKEN" \
            -H "Content-Type: application/json" \
            -d '{}'
      

  notify-discord:
    runs-on: ubuntu-latest
    needs: [build-frontend, docker-build-push, update-deployment-file]
    if: always()
    steps:
      - name: Send notification to Discord
        if: success()
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        run: |
          curl -H "Content-Type: application/json" \
            -d '{"content":"**CI/CD Pipeline Success**\n'\
                  'Build Number: '${{ github.run_number }}\'}' \
